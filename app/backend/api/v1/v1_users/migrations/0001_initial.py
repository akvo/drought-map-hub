# Generated by Django 4.2.16 on 2025-09-23 05:27

from django.db import migrations, models
import django.db.models.deletion
import utils.custom_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("v1_setup", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[(1, "Admin"), (2, "Reviewer")], default=2
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("read", "Read"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                        ],
                        max_length=10,
                    ),
                ),
                ("subject", models.CharField(max_length=50)),
                ("conditions", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "ability",
                "unique_together": {("role", "action", "subject")},
            },
        ),
        migrations.CreateModel(
            name="SystemUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "role",
                    models.IntegerField(
                        choices=[(1, "Admin"), (2, "Reviewer")], default=2
                    ),
                ),
                ("email_verified", models.BooleanField(default=False)),
                ("email_verification_code", models.UUIDField(default=None, null=True)),
                (
                    "email_verification_expiry",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "reset_password_code",
                    models.UUIDField(blank=True, default=None, null=True),
                ),
                (
                    "reset_password_code_expiry",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="v1_setup.organization",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "system_user",
            },
            managers=[
                ("objects", utils.custom_manager.UserManager()),
            ],
        ),
    ]
